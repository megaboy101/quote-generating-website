var _user$project$Main$decodeQuote = A3(
	_elm_lang$core$Json_Decode$map2,
	F2(
		function (x, y) {
			return {author: x, content: y};
		}),
	A2(_elm_lang$core$Json_Decode$field, 'quoteAuthor', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode$field, 'quoteText', _elm_lang$core$Json_Decode$string));
var _user$project$Main$apiUrl = 'https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=jsonp&jsonp=?';
var _user$project$Main$viewError = function (model) {
	var _p0 = model.error;
	if (_p0.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$p,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		var _p1 = _p0._0;
		switch (_p1.ctor) {
			case 'BadUrl':
				return A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('error'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'bad url: ', _p1._0)),
						_1: {ctor: '[]'}
					});
			case 'Timeout':
				return A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('error'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('network timeout'),
						_1: {ctor: '[]'}
					});
			case 'NetworkError':
				return A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('error'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('unknown network error'),
						_1: {ctor: '[]'}
					});
			case 'BadStatus':
				return A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('error'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(_elm_lang$core$Basics_ops['++'], 'Bad status: ', _p1._0.status.message)),
						_1: {ctor: '[]'}
					});
			default:
				return A2(
					_elm_lang$html$Html$p,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('error'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Bad payload: ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_p1._0,
									A2(_elm_lang$core$Basics_ops['++'], '\nother debugg: ', _p1._1.status.message)))),
						_1: {ctor: '[]'}
					});
		}
	}
};
var _user$project$Main$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	{
		quote: {author: '', content: ''},
		error: _elm_lang$core$Maybe$Nothing
	},
	{ctor: '[]'});
var _user$project$Main$Model = F2(
	function (a, b) {
		return {quote: a, error: b};
	});
var _user$project$Main$Quote = F2(
	function (a, b) {
		return {author: a, content: b};
	});
var _user$project$Main$Request = {ctor: 'Request'};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Quote Generator'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$p,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'author: ',
										A2(
											_elm_lang$core$Basics_ops['++'],
											model.quote.author,
											A2(_elm_lang$core$Basics_ops['++'], '\ncontent: ', model.quote.content)))),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: _user$project$Main$viewError(model),
							_1: {ctor: '[]'}
						}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Request),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Get new quote'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$NewQuote = function (a) {
	return {ctor: 'NewQuote', _0: a};
};
var _user$project$Main$getNewQuote = function () {
	var request = A2(_elm_lang$http$Http$get, _user$project$Main$apiUrl, _user$project$Main$decodeQuote);
	return A2(_elm_lang$http$Http$send, _user$project$Main$NewQuote, request);
}();
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		if (_p2.ctor === 'Request') {
			return A2(
				_elm_lang$core$Platform_Cmd_ops['!'],
				model,
				{
					ctor: '::',
					_0: _user$project$Main$getNewQuote,
					_1: {ctor: '[]'}
				});
		} else {
			if (_p2._0.ctor === 'Ok') {
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{quote: _p2._0._0}),
					{ctor: '[]'});
			} else {
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							quote: {author: 'Error', content: 'Error'},
							error: _elm_lang$core$Maybe$Just(_p2._0._0)
						}),
					{ctor: '[]'});
			}
		}
	});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: _user$project$Main$init,
		view: _user$project$Main$view,
		update: _user$project$Main$update,
		subscriptions: function (_p3) {
			return _elm_lang$core$Platform_Sub$none;
		}
	})();
